//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;
using UnityEngine;

public class UITownWindow : UIPlayerMenuWindow
{
	public Transform pointerTransform;
	//public List<UIPlayerMenuPanel> TownPanels;
	[HideInInspector]
	public UILabel TitleLabel = null;
	public UILabel InfoLabel = null;
	public UILabel InstructLabel = null;
	Transform sharedEle;

	protected float pointerAngle = 90f;
	public float PointerAngle
	{
		get 
		{
			return pointerAngle;
		}
	}

//	bool updateTitle;

	public enum EBackpackPanels
	{
		TOWN,
		BACKPACK,
		TOWER,
		SKILLS,
		TAVERN,
		QUIT,
		MAX
	}

	public override void Initialise ()
	{
		sharedEle = transform.Find("Shared Elements");
		
		TitleLabel = sharedEle.Find("MenuTitle").transform.Find("Label").GetComponent<UILabel>();
		InfoLabel = sharedEle.Find("Information Box").transform.Find("Scroll View").transform.Find("Item Properties").GetComponent<UILabel>();
		InstructLabel = sharedEle.Find("Instructions").GetComponent<UILabel>();

		OnMenuLeftStickMove += HandleOnMenuLeftStickMove;
		base.Initialise ();
	}

	public override void Update()
	{
		base.Update();

//		if (updateTitle)
//		{
//			SetTitle();
//			updateTitle = false;
//		}
	}

	public override void OnEnable()
	{
		//if (activePanel != null)
	}

	void HandleOnMenuLeftStickMove (InputDevice device)
	{		
		if (!pointerTransform.gameObject.activeInHierarchy) return;
		pointerAngle = Utilities.VectorToAngleInDegrees(device.LeftStickX.Value,device.LeftStickY.Value);
		pointerTransform.rotation = Quaternion.Euler(0f,0f,pointerAngle - 90f);
	}

	/// <summary> Return item to inventory if space permits. </summary>
	public bool Unequip(int slot)
	{
		return true;
	}

	public override void TransitionToPanel(int index)
	{	
		activePanel.gameObject.SetActive(false);
		activePanel = panels[index];
		activePanel.gameObject.SetActive(true);
	}

	public override void AddAllMenuPanels()
	{
		panels[(int)EBackpackPanels.BACKPACK] = transform.FindChild("BackpackMenu").GetComponent<UIPlayerMenuPanel>();
		panels[(int)EBackpackPanels.TOWN] = transform.FindChild("TownMenu").GetComponent<UIPlayerMenuPanel>();
		panels[(int)EBackpackPanels.TOWER] = transform.FindChild("TowerConfirm").GetComponent<UIPlayerMenuPanel>();

		for (int i = 0; i < panels.Count; ++i)
		{
			panels[i].SetParent(this);
			panels[i].gameObject.SetActive(true);
			panels[i].Initialise();
			panels[i].gameObject.SetActive(false);
		}
		
		activePanel = panels[(int)EBackpackPanels.TOWN];
		player.ActivePlayerPanel = activePanel;
		NGUITools.SetActive(activePanel.gameObject,true);
		activePanel.OnEnable();
	}
	
	public void ShowArrow(bool state)
	{
		GameObject temp = pointerTransform.gameObject;
		NGUITools.SetActive(temp , state);
	}

	public void ShowInfo(bool state)
	{
		GameObject temp = sharedEle.FindChild("Information Box").gameObject;
		NGUITools.SetActive(temp , state);
	}

	public void SetTitle(string replace)
	{
		TitleLabel.text = replace;
	}

	public void SetInfo(string replace)
	{
		InfoLabel.text = replace;
	}
}

